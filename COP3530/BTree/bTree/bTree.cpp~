#include "bTree.h"
bTree::bTree(int s) {
	root = NULL;
    size = s;
	if (s <= 3) min_deg = 2;
    else if(size % 2 == 0) min_deg = size/2;
    else min_deg = (size-1)/2;  
}
bTree::~bTree() {
    delete[] root;
}
void bTree::insert(string key, string value) {
    if (root == NULL) {
        root = new bTreeNode(min_deg, true);
        root -> keys[0] = key;  
        root -> values[0] = value;   
        root -> num_keys = 1; 
    }
    else { 
        if (root -> num_keys == (2 * min_deg)-1) {
            bTreeNode *newNode = new bTreeNode(min_deg, false);
            newNode -> child_ptr[0] = root;
            newNode -> split(0, root);
			int i = 0;
			if (newNode->keys[0] < key)
				i++;
				newNode->child_ptr[i]->insertNode(key, value);
				root = newNode;
        }
        else{
            root -> insertNode(key, value);
        }
    }
}
bool bTree::find(string key, string *value) {
    if (root == NULL){
        return false;
    }
    else{
        return root->search(key, value);
    }
}
bool bTree::delete_key(string key) {
    if (!root) {
        //cout << "The tree is empty\n";
        return false;
    }
	// Call the remove function for root
	root->remove(key);

	// If the root node has 0 keys, make its first child as the new root
	//  if it has a child, otherwise set root as NULL
	if (root -> num_keys == 0){
		bTreeNode *tmp = root;
		if (root->isLeaf) 
			root = NULL;
		else
			root = root->child_ptr[0];

		// Free the old root
		delete tmp;
	}
	return true;
}
string bTree::toStr() {
    string output = "";
    if(root!= NULL) {
        output += root  ->  traverse();
    }    
    return output;
}
